---
import type { ComponentHero } from "../lib/componentHero";
import { contentfulClient } from "../lib/contentful";
import HeroGlitchAnimationLayers from "./HeroGlitchAnimationLayers.astro";
import HeroShakeAnimationLayers from "./HeroShakeAnimationLayers.astro";


const { title, sfx } = Astro.props;
let asset;
try {
    asset = await contentfulClient.getEntry<ComponentHero>({
        content_type: "componentHero",
        title: title,
    });
} catch (error) {
    console.error("Failed to fetch entry:", error);
    asset = null;
}

const desktopBackgroundUrl = asset?.fields?.desktopBackground?.fields?.file?.url
    ? `https:${asset.fields.desktopBackground.fields.file.url}`
    : 'default-background.jpg';

const mobileBackgroundUrl = asset?.fields?.mobileBackground?.fields?.file?.url
    ? `https:${asset.fields.mobileBackground.fields.file.url}`
    : 'default-background.jpg';
---

<!-- #hero-home has a defined height via Tailwind -->
<div
        id="hero-home"
        class="
    bg-hero
    aspect-hero-mobile       /* e.g., aspect ratio for mobile */
    sm:aspect-hero-desktop   /* e.g., aspect ratio for desktop */
    w-full
    relative                 /* if you need positioned elements inside */
    overflow-hidden
  "
        data-desktop-bg={desktopBackgroundUrl}
        data-mobile-bg={mobileBackgroundUrl}
        data-sfx={sfx}
>
    <!-- animation layers -->
    <!--{sfx === "glitch" ? <HeroGlitchAnimationLayers />: null}-->
    <!--{sfx === "shake" ? <HeroShakeAnimationLayers />: null}-->
    <HeroGlitchAnimationLayers />
    <HeroShakeAnimationLayers />




    <!-- Hero content above or below the glitch container -->
    <div class="p-4 container mx-auto relative z-[2]">
        <h2>{asset?.fields?.title || "Default Title"}</h2>
    </div>
</div>

<script>
    // Grab the hero element */
    import glitchAnimation from "../animations/glitch";
    import shakeAnimation from "../animations/shake";
    const heroElement = document.getElementById('hero-home');


    const backgroundStyles:string = `
    .bg-hero {
      background-image: url("${heroElement.dataset.mobileBg}");
      background-size: cover;
      background-position: center;
    }
     @media (min-width: 640px) {
     .bg-hero{
        background-image: url("${heroElement.dataset.desktopBg}") !important
      }
     }
    `
    let styles = backgroundStyles;
    if(heroElement.dataset.sfx === "glitch"){
        styles += glitchAnimation()
    }
    else if(heroElement.dataset.sfx === "shake"){
        styles += shakeAnimation()
    }







    // Dynamic CSS


    // Inject the style into the page
    const styleSheet = document.createElement('style');
    styleSheet.type = 'text/css';
    styleSheet.textContent = styles
    document.head.appendChild(styleSheet);
</script>
