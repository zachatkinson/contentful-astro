---
import Layout from '../layouts/Layout.astro';
import {contentfulClient} from "../lib/contentful";
import type {BlogPost} from "../lib/blogPost";
import Hero from '../components/Hero/Hero.astro';
import AnimatedCallToAction from "../components/AnimatedCallToAction/AnimatedCallToAction.astro";
import KineticSlider3 from "../components/KineticSlider3/KineticSlider";
import {
    type AdjustmentFilterConfig,
    type AlphaFilterConfig,
    type TextPair,
    type BlurFilterConfig,
    type ColorMatrixFilterConfig,
    type NoiseFilterConfig
} from "../components/KineticSlider3/filters";
const images = [
    "/images/slides/1.jpg",
    "/images/slides/2.jpg",
    "/images/slides/3.jpg",
    "/images/slides/4.jpg",
    "/images/slides/5.jpg",
];
const blurFilter: BlurFilterConfig = {
    type: 'blur',
    enabled: true,
    intensity: 1,
    quality: 16,
    resolution: 1,
    kernelSize: 5
};
const alphaFilter: AlphaFilterConfig = {
    type: 'alpha',
    enabled: true,
    intensity: 0
}

const sepiaFilter: ColorMatrixFilterConfig = {
    type: 'colorMatrix',
    enabled: true,
    intensity: 10, // Controls how strong the effect blends (7/10 = 0.7 alpha)
    preset: 'vintage' // Use the built-in sepia preset

};
const noiseFilter: NoiseFilterConfig = {
    type: 'noise',
    enabled: true,
    intensity: 3,      // Intensity on a scale of 0-10 (will be normalized to 0-1 internally)
    noiseLevel: 0.3,   // Optional: Direct noise level (0-1)
    seed: Math.random(), // Random seed
    generateNewSeedOnUpdate: true // Generate new randomization when intensity changes
};

const fadedFilmFilter: AdjustmentFilterConfig = {
    type: 'adjustment',
    enabled: true,
    intensity: 10,
    primaryProperty: 'blue',
    contrast: 0,   // Slightly reduce contrast
    saturation: 0.2,  // Reduce saturation
    red: 0.5,        // Slightly increase red
    blue: 1.2,        // Slightly reduce blue
    brightness: 1.1   // Increase brightness
};
const bloomEffect = {
    type: 'advancedBloom',
    enabled: true,
    intensity: 6,
    bloomScale: 1.5,
    brightness: 1.2,
    blur: 3,
    threshold: 0.4,
    quality: 4,
    pixelSize: { x: 1, y: 1 },  // This is a single object, not separate X/Y props
    primaryProperty: 'bloomScale'  // Only valid options are bloomScale, brightness, blur, threshold
};
// ASCII filter preserving original colors
const colorPreservingAsciiFilter = {
    type: 'ascii',
    enabled: true,
    intensity: 1,
    replaceColor: false, // Keep original image colors
};

// ASCII filter with custom color
const coloredAsciiFilter = {
    type: 'ascii',
    enabled: true,
    intensity: 20,
    color: 0x00ff00, // Green ASCII characters
    replaceColor: false,
};

// Example BackdropBlurFilter configuration
const backdropBlurFilter = {
    type: 'backdropBlur',
    enabled: true,
    intensity: 10,        // On a scale of 0-10 (will be multiplied by 10 internally)
    quality: 4,          // Higher quality = smoother blur but slower performance
    kernelSize: 13,      // Larger kernel = more pronounced blur effect (5, 7, 9, 11, 13, 15)
    resolution: 1,       // Resolution scaling factor
    repeatEdgePixels: true  // Repeats edge pixels for smoother blur borders
};

// Add our new BevelFilter configuration
const goldMetallicBevel = {
    type: 'bevel',
    enabled: true,
    intensity: 7,
    rotation: 135,        // Light from upper-right
    lightColor: 0xffd700, // Gold light
    lightAlpha: 0.8,
    shadowColor: 0x8b4513, // Brown shadow
    shadowAlpha: 0.7,
    primaryProperty: 'thickness'
};

// Example of a subtle emboss effect
const embossFilter = {
    type: 'bevel',
    enabled: true,
    intensity: 3,
    rotation: 75,
    lightColor: 0xffffff,
    lightAlpha: 0.5,
    shadowColor: 0x000000,
    shadowAlpha: 0.5,
    thickness: 1,         // Thin bevel for subtle effect
    primaryProperty: 'lightAlpha' // Intensity controls light strength
};

const bloomFilter =     {
    type: 'bloom',
    enabled: true,
    intensity: 10,   // On a scale of 0-10
    strengthX: 10,
    strengthY: 10,
    primaryProperty: 'strength' // Optional - determines which property intensity affects
}

// Magnifying glass effect (bulge)
const magnifyingGlassFilter = {
    type: 'bulgePinch',
    enabled: true,
    intensity: 10,        // On a scale of 0-10
    radius: 186,         // Size of the effect area
    strength: 1,       // Positive value for bulge effect
    center: { x: 0.5, y: 0.5 }, // Center of the screen
    primaryProperty: 'strength'
};

// Example of a purple-to-orange gradient filter for images
const imageGradientFilter = {
    type: 'colorGradient',
    enabled: true,
    intensity: 6, // Controls the alpha of the gradient (0-10 scale maps to 0-1)
    colors: [0x9933ff, 0xff6600], // Purple to orange
    angle: 45, // 45-degree angle
    replace: false, // Multiply with original colors instead of replacing
    primaryProperty: 'alpha' // The intensity controls the alpha
};

// Example of a blue-to-cyan text gradient filter
const textGradientFilter = {
    type: 'colorGradient',
    enabled: true,
    intensity: 8,
    colors: [0x0066ff, 0x00ffcc], // Blue to cyan
    angle: 90, // Vertical gradient
    replace: true, // Replace the original text color
    primaryProperty: 'alpha'
};

const colorMapFilter = {
    type: 'colorMap',
    enabled: true,
    intensity: 7,
    colorMap: '/public/images/colormap.png', // Path to your color map texture
    nearest: false
};

const colorOverlayFilter = {
    type: 'colorOverlay',
    enabled: true,
    intensity: 10, // 50% opacity by default
    color: 0x00FF00, // Orange overlay
    primaryProperty: 'alpha' // Intensity will control opacity
}

const colorReplaceFilter = {
    type: 'colorReplace',
        enabled: true,
    intensity: 5, // Will map to a tolerance of 0.5
    originalColor: 0xD8B84A, // Red
    targetColor: 0x0000ff    // Blue
}

const convolutionFilter = {
        type: 'convolution',
            enabled: true,
        intensity: 1, // 0-10 scale, 5 = half strength effect
        preset: 'sharpen'
}

const crossHatchFilter = {
    type: 'crossHatch',  // Apply the CrossHatch filter
    enabled: true,       // Enable the filter
    intensity: 3        // Set medium-high intensity (0-10 scale)
}

// CRT filter with retro TV effect
const crtFilter = {
    type: 'crt',
    enabled: true,
    intensity: 8,             // Overall intensity on scale of 0-10
    curvature: 1.5,           // Moderate screen curvature
    lineContrast: 0.3,        // Scan line contrast
    lineWidth: 1.5,           // Slightly wider scan lines
    noise: 0.4,               // Moderate noise
    vignetting: 0.3,          // Moderate vignette effect
    vignettingAlpha: 0.8,     // Slightly transparent vignette
    verticalLine: false,      // Horizontal scan lines
    primaryProperty: 'noise'  // Intensity controls noise level
};

// Basic dotscreen effect with default settings
const basicDotFilter = {
    type: 'dot',
    enabled: true,
    intensity: 5      // Medium intensity on 0-10 scale
};

// Color dotscreen effect (non-grayscale)
const colorDotFilter = {
    type: 'dot',
    enabled: true,
    intensity: 7,
    grayscale: false, // Should be in color
    scale: 1.5,       // Slightly larger pattern
    angle: 5,         // Default dot size
    primaryProperty: 'scale'
};

const comicBookFilter = {
    type: 'dot',
    enabled: true,
    intensity: 8,       // High intensity for pronounced dots
    grayscale: false,   // Use color for "four-color" printing effect
    scale: 1.8,         // Larger scale makes the dots more visible
    angle: 6,           // Medium-large dots
    primaryProperty: 'angle' // Intensity controls dot size
};

// Large-scale newspaper print style effect
const newspaperDotFilter = {
    type: 'dot',
    enabled: true,
    intensity: 1,    // Maximum intensity
    angle: 5,         // Larger dot radius
    scale: 1,         // Larger scale for bigger pattern
    grayscale: true,  // Black and white
    primaryProperty: 'scale' // Intensity controls pattern scale
};

const textShadow = {
    type: 'dropShadow',
    enabled: true,
    intensity: 6,
    blur: 3,
    offsetX: 10,
    offsetY: 10,
    color: 0x00FF00,
    alpha: 0.7,
    primaryProperty: 'alpha'  // Intensity affects opacity
};

const standardEmboss = {
    type: 'emboss',
    enabled: true,
    intensity: 5 // Medium emboss effect (maps to strength of 10)
};

// Basic static glitch effect - classic RGB split with static distortion
const basicGlitch = {
    type: 'glitch',
    enabled: true,
    intensity: 5,          // Medium intensity on 0-10 scale
    slices: 6,             // Number of horizontal slices
    offset: 100,           // Maximum offset distance
    direction: 0,          // Horizontal direction (0 degrees)
    red: { x: 3, y: 0 },   // Red channel offset right
    blue: { x: -3, y: 0 }, // Blue channel offset left
    green: { x: 0, y: 0 }, // Green channel centered
    average: false,        // Random slice sizes for more chaotic look
    fillMode: 0,           // Transparent fill mode
    primaryProperty: 'offset', // Intensity controls offset amount
    seed: 42               // Fixed seed for consistent distortion pattern
};

// Animated digital error glitch effect - simulates transmission errors
const animatedGlitch = {
    type: 'glitch',
    enabled: true,
    intensity: 7,           // Higher intensity for more dramatic effect
    slices: 10,             // More slices for fragmented look
    offset: 150,            // Larger offset for more dramatic displacement
    direction: 0,           // Horizontal glitching
    red: { x: 4, y: 1 },    // Red channel offset right and slightly down
    blue: { x: -4, y: -1 }, // Blue channel offset left and slightly up
    green: { x: -8, y: 2 },  // Green channel centered
    animated: true,         // Enable automatic animation
    refreshFrequency: 1,    // Refresh effect 3 times per second
    minSize: 5,             // Allow for smaller slice sizes
    sampleSize: 512,        // Standard sample size
    fillMode: 0,            // Transparent fill mode
    seed: Math.random() * 1000, // Random seed for variety
    primaryProperty: 'slices'   // Intensity affects number of slices
};

const redOutlineGlow = {
    type: 'glow',
    enabled: true,
    intensity: 4,
    color: 0xFF0000,        // Red
    distance: 1,            // Minimum distance for a thin outline
    outerStrength: 4,       // Medium strength
    innerStrength: 0,
    quality: 0.4,           // Higher quality for cleaner edges
    knockout: false,
    alpha: 1.0,
    primaryProperty: 'outerStrength'
};

const whiteTextGlow = {
    type: 'glow',
    enabled: true,
    intensity: 3,           // Low intensity (0-10 scale)
    color: 0xFFFFFF,        // Pure white
    distance: 2,            // Very small distance
    outerStrength: 3,       // Moderate outer strength
    innerStrength: 0,       // No inner glow
    quality: 0.2,           // Moderate quality (0-1)
    knockout: false,        // Show the text (not just the glow)
    alpha: 1.0,             // Full opacity glow
    primaryProperty: 'outerStrength'
};

// Blue image glow - adds a blue aura to images
const blueImageGlow = {
    type: 'glow',
    enabled: true,
    intensity: 5,           // Medium intensity
    color: 0x0088FF,        // Blue
    distance: 4,            // Moderate distance
    outerStrength: 5,       // Medium-high strength
    innerStrength: 0,       // No inner glow
    quality: 0.3,           // Better quality
    knockout: false,
    alpha: 0.8,             // Slightly transparent
    primaryProperty: 'outerStrength'
};

const godrayFilter = {

    type: 'godray',
        enabled: true,
    intensity: 8,
    angle: 30,
    animate: true,
    animationSpeed: 0.02,
    primaryProperty: 'gain'

}


const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
})

const texts:TextPair[] = [
    ["Earth", "Surface gravity‎: ‎9.807 m/s²"],
    ["Mars", "Surface gravity‎: ‎3.711 m/s²"],
    ["Venus", "Surface gravity‎: ‎8.87 m/s²"],
    ["Mars", "Surface gravity‎: ‎3.711 m/s²"],
    ["Venus", "Surface gravity‎: ‎8.87 m/s²"]
];

const posts = entries.items.map((entry) => {
    return {
        title: entry.fields.title,
        slug: entry.fields.slug,
        description: entry.fields.description,
        date: new Date(entry.fields.date).toLocaleDateString()
    }
});
---

<Layout>
    <Hero slug="landing-page-hero" sfx="glitch" id="home-hero"/>
    <AnimatedCallToAction />


    <KineticSlider3
            client:load
            images={images}
            texts={texts}
            backgroundDisplacementSpriteLocation="/images/background-displace.jpg"
            cursorDisplacementSpriteLocation="/images/cursor-displace.png"
            cursorImgEffect={true}
            cursorTextEffect={true}
            cursorScaleIntensity={0.65}
            cursorMomentum={0.14}
            imageFilters={[
                godrayFilter
            ]}
            textFilters={[
                redOutlineGlow
            ]}
            textTitleColor="white"
            textTitleSize={64}
            mobileTextTitleSize={40}
            textTitleLetterspacing={2}
            textTitleFontFamily="'Vamos', Georgia, serif"
            textSubTitleColor="white"
            textSubTitleSize={24}
            mobileTextSubTitleSize={18}
            textSubTitleLetterspacing={1}
            textSubTitleOffsetTop={10}
            mobileTextSubTitleOffsetTop={5}
            textSubTitleFontFamily="'Helvetica Neue', Arial, sans-serif"
            maxContainerShiftFraction={0.05}
            swipeScaleIntensity={2}
            transitionScaleIntensity={30}
            externalNav={false}
            buttonMode={false}
    />
    <div class="p-4 container mx-auto">
        <h2>Latest Posts</h2>
        <ul>
            {posts.map((post) => (
                    <li>
                        <a href={`/posts/${post.slug}/`}>
                            <h2>{post.title}</h2>
                        </a>
                        <time>{post.date}</time>
                        <p>{post.description}</p>
                    </li>
            ))}
        </ul>
    </div>
</Layout>